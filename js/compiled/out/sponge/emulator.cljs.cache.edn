;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name sponge.emulator, :imports {StringBuffer goog.string.StringBuffer}, :requires {StringBuffer goog.string.StringBuffer, string clojure.string, clojure.string clojure.string}, :uses nil, :defs {screen-text {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 76, :column 7, :end-line 76, :end-column 18, :arglists (quote ([ctx]))}, :name sponge.emulator/screen-text, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 18, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx]))}, slurp {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 97, :column 7, :end-line 97, :end-column 12, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name sponge.emulator/slurp, :variadic true, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, parse-string {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 57, :column 7, :end-line 57, :end-column 19, :arglists (quote ([s]))}, :name sponge.emulator/parse-string, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, step {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 67, :column 7, :end-line 67, :end-column 11, :arglists (quote ([ctx]))}, :name sponge.emulator/step, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 11, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx]))}, run {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 71, :column 7, :end-line 71, :end-column 10, :arglists (quote ([ctx]))}, :name sponge.emulator/run, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 10, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx]))}, printable {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 113, :column 7, :end-line 113, :end-column 16, :arglists (quote ([program]))}, :name sponge.emulator/printable, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 16, :method-params ([program]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([program]))}, binop {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 14, :column 7, :end-line 14, :end-column 12, :arglists (quote ([op]))}, :name sponge.emulator/binop, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 12, :method-params ([op]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([op]))}, print-state {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 90, :column 7, :end-line 90, :end-column 18, :arglists (quote ([ctx]))}, :name sponge.emulator/print-state, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 18, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx]))}, parse-syntax {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 60, :column 7, :end-line 60, :end-column 19, :arglists (quote ([s]))}, :name sponge.emulator/parse-syntax, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, intcast {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 8, :column 7, :end-line 8, :end-column 14, :arglists (quote ([v]))}, :name sponge.emulator/intcast, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 14, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, print-*ip {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 86, :column 7, :end-line 86, :end-column 16, :arglists (quote ([ctx]))}, :name sponge.emulator/print-*ip, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 16, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx]))}, template {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 100, :column 7, :end-line 100, :end-column 15, :arglists (quote ([named]))}, :name sponge.emulator/template, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 15, :method-params ([named]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 1, :fn-var true, :arglists (quote ([named]))}, instr->svg {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 103, :column 7, :end-line 103, :end-column 17, :arglists (quote ([[op & args]]))}, :name sponge.emulator/instr->svg, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 17, :method-params ([p__8089]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[op & args]]))}, ops {:name sponge.emulator/ops, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 21, :column 1, :end-line 21, :end-column 9, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 21, :column 6, :end-line 21, :end-column 9}}, parse {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 51, :column 7, :end-line 51, :end-column 12, :arglists (quote ([src]))}, :name sponge.emulator/parse, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 12, :method-params ([src]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([src]))}, get-cell {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 5, :column 7, :end-line 5, :end-column 15, :arglists (quote ([ctx x]))}, :name sponge.emulator/get-cell, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 15, :method-params ([ctx x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx x]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:plot :* :copy :ip :else :> :- :state :+ :รท :set :< :jump :instr}, :order [:state :else :ip :plot :* :copy :> :- :+ :รท :set :< :jump :instr]}, :doc nil}